function(assembly) prints(str idk) -> void {
"
	mov rdi, rax
[extern puts]
	jmp puts
"
}

function(assembly) printc(chr idk) -> void {
"
	mov rdi, rax
[extern putchar]
	jmp putchar
"
}

// function(assembly) printi(int idk) -> void {
// "
// 	mov rdi, .fstr
// 	mov rsi, rax
// 	mov rax, 0
// [extern printf]
// 	jmp printf
// 
// .fstr: db '%d', 10, 0
// "
// }

function printi_base(int num, int base) -> void {
	chr[] digits = "0123456789abcdefghijklmnopqrstuvwxyz";

	chr[] buf = allocate(65);
	chr[] p = buf + 64;

	p[0] = 0;

	do {
		p--;
		p[0] = digits[num % base];
		num = num / base;
	} while num;

	prints(p);

	deallocate(buf);
}

function printi(int num) -> void {
	printi_base(num, 10);
}